import 'dart:convert';
import 'package:flutter_eco_track/models/product.dart';
import 'package:http/http.dart' as http;

class ProductService {
  static const String backendUrl = 'http://192.168.1.21:3000/products'; // ‚úÖ V√©rifie bien que c‚Äôest l‚ÄôIP de ton PC

  /// ‚úÖ Nouvelle m√©thode pour scanner un produit via le backend NestJS (qui appelle OpenFoodFacts)
  Future<Product?> scanProduct(String barcode) async {
    final url = Uri.parse('$backendUrl/scan'); // ‚úÖ Appel √† /products/scan c√¥t√© backend
    try {
      final response = await http.post(
        url,
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({"code": barcode}), // ‚úÖ Envoi du code-barres
      );

      if (response.statusCode == 200 || response.statusCode == 201) {
        final data = jsonDecode(response.body);
        if (data['product'] != null) {
          return Product.fromJson(data['product']); // ‚úÖ Conversion JSON ‚Üí mod√®le Flutter
        } else {
          print("‚ö†Ô∏è Produit non trouv√© dans la r√©ponse");
          return null;
        }
      } else {
        print("‚ùå Erreur HTTP (${response.statusCode}): ${response.body}");
        return null;
      }
    } catch (e) {
      print("üö® Erreur r√©seau scanProduct : $e");
      return null;
    }
  }

  /// üîç Recherche des produits par mot-cl√©, filtr√©s sur la Tunisie
  Future<List<Product>> searchProductsInTunisia(String term) async {
    final url = Uri.parse('$backendUrl/search/$term');
    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.map((json) => Product.fromJson(json)).toList();
      } else {
        throw Exception('Erreur de recherche');
      }
    } catch (e) {
      print("Erreur recherche : $e");
      return [];
    }
  }

  /// üì¶ R√©cup√®re tous les produits (sans filtre)
  Future<List<Product>> fetchAllProducts() async {
    final url = Uri.parse(backendUrl);
    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.map((product) => Product.fromJson(product)).toList();
      } else {
        throw Exception("Erreur lors du chargement des produits");
      }
    } catch (e) {
      print("Erreur API fetchAllProducts: $e");
      return [];
    }
  }

  /// üìú Historique des produits scann√©s
  Future<List<Product>> fetchSavedProducts() async {
    final url = Uri.parse('$backendUrl/scanned');
    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.map((json) => Product.fromJson(json)).toList();
      } else {
        throw Exception("Erreur lors de la r√©cup√©ration de l‚Äôhistorique");
      }
    } catch (e) {
      print("Erreur API : $e");
      return [];
    }
  }
Future<Product?> fetchProduct(String barcode) async {
  final url = Uri.parse('$backendUrl/$barcode');
  try {
    final response = await http.get(url);

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      return Product.fromJson(data);
    } else {
      print("‚ùå Produit non trouv√© (status ${response.statusCode})");
      return null;
    }
  } catch (e) {
    print("üö® Erreur fetchProduct : $e");
    return null;
  }
}

  /// üîÅ Alias pour historique
  Future<List<Product>> fetchScannedProducts() async {
    return fetchSavedProducts(); // ‚úÖ Rien √† changer ici
  }
}