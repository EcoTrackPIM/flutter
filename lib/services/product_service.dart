import 'dart:convert';
import 'package:flutter_eco_track/models/product.dart';
import 'package:http/http.dart' as http;

class ProductService {
  static const String backendUrl = 'http://192.168.1.128:3000/products'; // ‚úÖ IP backend correcte

  /// ‚úÖ Scanner un produit via backend NestJS
  Future<Product?> scanProduct(String barcode) async {
    final url = Uri.parse('$backendUrl/scan');
    try {
      final response = await http.post(
        url,
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({"code": barcode}),
      );

      print("üì¨ R√©ponse scanProduct HTTP ${response.statusCode}");

      if (response.statusCode == 200 || response.statusCode == 201) {
        final data = jsonDecode(response.body);
        if (data['product'] != null) {
          return Product.fromJson(data['product']);
        } else {
          print("‚ö†Ô∏è Produit non trouv√© dans la r√©ponse");
          return null;
        }
      } else {
        print("‚ùå Erreur HTTP (${response.statusCode}): ${response.body}");
        return null;
      }
    } catch (e) {
      print("üö® Erreur r√©seau scanProduct : $e");
      return null;
    }
  }

  /// üîç Recherche de produits par mot-cl√© (Tunisie)
  Future<List<Product>> searchProductsInTunisia(String term) async {
    final url = Uri.parse('$backendUrl/search/$term');
    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.map((json) => Product.fromJson(json)).toList();
      } else {
        throw Exception('Erreur recherche ${response.statusCode}');
      }
    } catch (e) {
      print("üö® Erreur recherche : $e");
      return [];
    }
  }

  /// üì¶ R√©cup√©rer tous les produits
  Future<List<Product>> fetchAllProducts() async {
    final url = Uri.parse(backendUrl);
    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.map((product) => Product.fromJson(product)).toList();
      } else {
        throw Exception("Erreur chargement ${response.statusCode}");
      }
    } catch (e) {
      print("üö® Erreur fetchAllProducts: $e");
      return [];
    }
  }

  /// üìú Historique des produits scann√©s
  Future<List<Product>> fetchSavedProducts() async {
    final url = Uri.parse('$backendUrl/scanned');
    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        return data.map((json) => Product.fromJson(json)).toList();
      } else {
        throw Exception("Erreur historique ${response.statusCode}");
      }
    } catch (e) {
      print("üö® Erreur fetchSavedProducts: $e");
      return [];
    }
  }

  /// üîÅ Alias pour historique
  Future<List<Product>> fetchScannedProducts() async {
    return fetchSavedProducts();
  }

  /// üîç R√©cup√©rer un seul produit par code-barres
  Future<Product?> fetchProduct(String barcode) async {
    final url = Uri.parse('$backendUrl/$barcode');
    try {
      final response = await http.get(url);

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return Product.fromJson(data);
      } else {
        print("‚ùå Produit non trouv√© (status ${response.statusCode})");
        return null;
      }
    } catch (e) {
      print("üö® Erreur fetchProduct : $e");
      return null;
    }
  }

  /// ‚ûï Cr√©er un produit minimal si introuvable
  Future<void> createNewProduct(String code, String category) async {
    final url = Uri.parse(backendUrl);

    try {
      final response = await http.post(
        url,
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({
          'code': code,
          'productName': 'Produit inconnu',
          'brands': 'Non sp√©cifi√©',
          'categories': category,
          'imageUrl': '',
          'carbonImpact': 0,
          'ingredients': '',
          'recyclability': '',
          'countries': 'Tunisia',
          'source': 'ajout-manuelle'
        }),
      );

      if (response.statusCode == 201 || response.statusCode == 200) {
        print('‚úÖ Produit ajout√© avec succ√®s.');
      } else {
        print('‚ùå Erreur HTTP createNewProduct (${response.statusCode}): ${response.body}');
        throw Exception('Erreur serveur cr√©ation');
      }
    } catch (e) {
      print("üö® Erreur r√©seau createNewProduct : $e");
      throw Exception('Erreur r√©seau cr√©ation');
    }
  }

  /// ‚úçÔ∏è Envoyer les informations de base (Nom, Marques, Quantit√©, Ingr√©dients)
  Future<void> sendBasicInfo(String code, String productName, String brands, String quantity, String ingredients) async {
    final url = Uri.parse('$backendUrl/basic-info');
    try {
      final response = await http.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'code': code,
          'productName': productName,
          'brands': brands,
          'quantity': quantity,
          'ingredients': ingredients,
        }),
      );

      if (response.statusCode == 200 || response.statusCode == 201) {
        print('‚úÖ Informations de base envoy√©es avec succ√®s.');
      } else {
        print('‚ùå Erreur HTTP sendBasicInfo (${response.statusCode}): ${response.body}');
      }
    } catch (e) {
      print('üö® Erreur r√©seau sendBasicInfo : $e');
    }
  }
}
